import { type NextPage } from "next";
import Head from "next/head";
import Navbar from "~/components/Navbar";
import { api } from "~/utils/api";
import { RouterOutputs } from "~/utils/api";
import { useState } from "react";
import { useSession } from "next-auth/react";
import TextEditor from "~/components/TextEditor";
import NoteCard from "~/components/NoteCard";

type Topic = RouterOutputs["topic"]["get"][number];

const AllTopics = ({
  topics,
  handleTopicChange,
}: {
  topics: Topic[];
  handleTopicChange: ({ topic }: { topic: Topic }) => void;
}) => {
  if (!topics || !topics.length) return <p>No topic yet</p>;

  return (
    <div className="py-5">
      {topics.map((t) => (
        <button
          onClick={() =>
            handleTopicChange({
              topic: t,
            })
          }
          className="btn-ghost btn"
          key={t.id}
        >
          {t.title}
        </button>
      ))}
    </div>
  );
};

type NewTopicProps = {
  createTopic: ({ data }: { data: string }) => void;
};

const NewTopic = ({ createTopic }: NewTopicProps) => {
  const [newTopic, setNewTopic] = useState("");

  const handlePost = () => {
    createTopic({
      data: newTopic,
    });
    setNewTopic("");
  };

  return (
    <div className="flex">
      <input
        type="text"
        placeholder="Type here"
        className="input-bordered input w-full"
        value={newTopic}
        onChange={(e) => setNewTopic(e.target.value)}
      />
      <button onClick={handlePost} className="btn-primary btn">
        Add
      </button>
    </div>
  );
};

const Home: NextPage = () => {
  const [currTopic, setCurrTopic] = useState<Topic | null>(null);

  const session = useSession();

  const { data: topics, refetch } = api.topic.get.useQuery(undefined, {
    enabled: session.status === "authenticated",
    onSuccess: (data) => {
      setCurrTopic((prev) => prev ?? data[0] ?? null);
    },
  });

  const { data: notes, refetch: refetchNote } = api.note.get.useQuery(
    {
      topicId: currTopic?.id || "",
    },
    {
      enabled: !!currTopic?.id,
    }
  );

  const { mutate } = api.topic.create.useMutation({
    onSuccess: () => {
      refetch();
    },
  });

  const { mutate: createNote } = api.note.create.useMutation({
    onSuccess: () => {
      refetchNote();
    },
  });

  const { mutate: deleteNote, isLoading } = api.note.delete.useMutation({
    onSuccess: () => {
      refetchNote();
    },
  });

  if (session.status === "loading") return <p>Loading...</p>;

  const content = (
    <>
      <div className="col-span-2">
        <NewTopic
          createTopic={({ data }) => {
            mutate({
              title: data,
            });
          }}
        />
        {topics && (
          <AllTopics
            handleTopicChange={({ topic }) => {
              setCurrTopic(topic);
            }}
            topics={topics}
          />
        )}
      </div>

      <div className="col-span-4 pl-10">
        {notes?.map((note) => (
          <NoteCard
            note={note}
            key={note.id}
            loading={isLoading}
            onDelete={({ noteId }) => {
              deleteNote({
                noteId,
              });
            }}
          />
        ))}

        {currTopic && (
          <TextEditor
            onSave={({ content }) => {
              createNote({
                note: content,
                topic: currTopic.id,
              });
            }}
          />
        )}
      </div>
    </>
  );

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Navbar />
      <main className="grid w-full grid-cols-6 p-10">
        {session.status === "unauthenticated" ? (
          <p className="col-span-6">Login first</p>
        ) : (
          content
        )}
      </main>
    </>
  );
};

export default Home;
